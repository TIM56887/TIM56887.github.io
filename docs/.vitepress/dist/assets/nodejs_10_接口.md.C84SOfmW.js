import{_ as s,c as a,o as i,a2 as t}from"./chunks/framework.PSdYnWp7.js";const e="/assets/1683303000410.UEwPI924.png",n="/assets/1683303040438.DMZ2xC5v.png",y=JSON.parse('{"title":"接口","description":"","frontmatter":{},"headers":[],"relativePath":"nodejs/10_接口.md","filePath":"nodejs/10_接口.md","lastUpdated":null}'),l={name:"nodejs/10_接口.md"},h=t('<h1 id="接口" tabindex="-1">接口 <a class="header-anchor" href="#接口" aria-label="Permalink to &quot;接口&quot;">​</a></h1><h2 id="一、简介" tabindex="-1">一、简介 <a class="header-anchor" href="#一、简介" aria-label="Permalink to &quot;一、简介&quot;">​</a></h2><h3 id="_1-1-接口是什么" tabindex="-1">1.1 接口是什么 <a class="header-anchor" href="#_1-1-接口是什么" aria-label="Permalink to &quot;1.1 接口是什么&quot;">​</a></h3><p>接口是 <code>前后端通信的桥梁</code> 简单理解：一个接口就是 <code>服务中的一个路由规则</code> ，根据请求响应结果 接口的英文单词是 API (Application Program Interface)，所以有时也称之为 <code>API 接口</code> 这里的接口指的是『数据接口』， <code>与编程语言（Java，Go 等）中的接口语法不同</code></p><h3 id="_1-2-接口的作用" tabindex="-1">1.2 接口的作用 <a class="header-anchor" href="#_1-2-接口的作用" aria-label="Permalink to &quot;1.2 接口的作用&quot;">​</a></h3><p>实现 <code>前后端通信</code><img src="'+e+'" alt="1683303000410"></p><h3 id="_1-3-接口的开发与调用" tabindex="-1">1.3 接口的开发与调用 <a class="header-anchor" href="#_1-3-接口的开发与调用" aria-label="Permalink to &quot;1.3 接口的开发与调用&quot;">​</a></h3><p>大多数接口都是由 <code>后端工程师</code> 开发的， <code>开发语言不限</code> 一般情况下接口都是由 <code>前端工程师</code> 调用的，但有时 <code>后端工程师也会调用接口</code> ，比如短信接口，支付接口等</p><h3 id="_1-4-接口的组成" tabindex="-1">1.4 接口的组成 <a class="header-anchor" href="#_1-4-接口的组成" aria-label="Permalink to &quot;1.4 接口的组成&quot;">​</a></h3><p>一个接口一般由如下几个部分组成</p><ul><li>请求方法</li><li>接口地址（URL）</li><li>请求参数</li><li>响应结果</li></ul><p>一个接口示例 <a href="https://www.free-api.com/doc/325" target="_blank" rel="noreferrer">https://www.free-api.com/doc/325</a><img src="'+n+`" alt="1683303040438"></p><blockquote><p>体验一下：<a href="https://api.asilu.com/idcard/?id=371522199111299668" target="_blank" rel="noreferrer">https://api.asilu.com/idcard/?id=371522199111299668</a></p></blockquote><h2 id="二、restful-api" tabindex="-1">二、RESTful API <a class="header-anchor" href="#二、restful-api" aria-label="Permalink to &quot;二、RESTful API&quot;">​</a></h2><p>RESTful API 是一种特殊风格的接口，主要特点有如下几个：</p><ul><li>URL 中的路径表示 <code>资源</code> ，路径中不能有 动词 ，例如 <code>create</code> , <code>delete</code> , <code>update</code> 等这些都不能有</li><li>操作资源要与 <code>HTTP 请求方法</code> 对应</li><li>操作结果要与 <code>HTTP 响应状态码</code> 对应</li></ul><p>规则示例：</p><table><thead><tr><th>操作</th><th>请求类型</th><th>URL</th><th>返回</th></tr></thead><tbody><tr><td>新增歌曲</td><td>POST</td><td>/song</td><td>返回新生成的歌曲信息</td></tr><tr><td>删除歌曲</td><td>DELETE</td><td>/song/10</td><td>返回一个空文档</td></tr><tr><td>修改歌曲</td><td>PUT</td><td>/song/10</td><td>返回更新后的歌曲信息</td></tr><tr><td>修改歌曲（部分字段）</td><td>PATCH</td><td>/song/10</td><td>返回更新后的歌曲信息</td></tr><tr><td>获取所有歌曲</td><td>GET</td><td>/song</td><td>返回歌曲列表数组</td></tr><tr><td>获取单个歌曲</td><td>GET</td><td>/song/10</td><td>返回单个歌曲信息</td></tr></tbody></table><blockquote><p>扩展阅读：<a href="https://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noreferrer">https://www.ruanyifeng.com/blog/2014/05/restful_api.html</a></p></blockquote><h2 id="三、json-server" tabindex="-1">三、json-server <a class="header-anchor" href="#三、json-server" aria-label="Permalink to &quot;三、json-server&quot;">​</a></h2><p>json-server 本身是一个 JS 编写的工具包，可以快速搭建 RESTful API 服务 官方地址: <a href="https://github.com/typicode/json-server" target="_blank" rel="noreferrer">https://github.com/typicode/json-server</a></p><p>操作步骤：</p><ol><li>全局安装 <code>json-server</code><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> json-server</span></span></code></pre></div></li><li>创建 JSON 文件（db.json），编写基本结构<div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;song&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;干杯&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;singer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;五月天&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;当&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;singer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;动力火车&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;不能说的秘密&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;singer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;周杰伦&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><code>以 JSON 文件所在文件夹作为工作目录</code> ，执行如下命令<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json-server</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --watch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db.json</span></span></code></pre></div></li></ol><p>默认监听端口为 <code>3000</code></p><h2 id="四、接口测试工具" tabindex="-1">四、接口测试工具 <a class="header-anchor" href="#四、接口测试工具" aria-label="Permalink to &quot;四、接口测试工具&quot;">​</a></h2><p>介绍几个接口测试工具</p><ul><li><a href="https://www.apipost.cn/" target="_blank" rel="noreferrer">apipost (中文)</a><ul><li><a href="https://txyz.lanzoue.com/i3zAA0uuiywf" target="_blank" rel="noreferrer">蓝奏</a> 密码:8vfw</li></ul></li><li><a href="https://www.apifox.cn/" target="_blank" rel="noreferrer">apifox (中文)</a></li><li><a href="https://www.postman.com/" target="_blank" rel="noreferrer">postman (英文)</a></li></ul>`,27),p=[h];function r(d,o,k,c,E,u){return i(),a("div",null,p)}const F=s(l,[["render",r]]);export{y as __pageData,F as default};
