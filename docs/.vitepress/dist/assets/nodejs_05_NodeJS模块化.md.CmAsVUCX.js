import{_ as s,c as e,o as i,a2 as a}from"./chunks/framework.PSdYnWp7.js";const l="/assets/1683296652447.GEfYeCpO.png",o="/assets/1683296785095.DZHXG79M.png",_=JSON.parse('{"title":"Node.js 模块化","description":"","frontmatter":{},"headers":[],"relativePath":"nodejs/05_NodeJS模块化.md","filePath":"nodejs/05_NodeJS模块化.md","lastUpdated":null}'),t={name:"nodejs/05_NodeJS模块化.md"},n=a(`<h1 id="node-js-模块化" tabindex="-1">Node.js 模块化 <a class="header-anchor" href="#node-js-模块化" aria-label="Permalink to &quot;Node.js 模块化&quot;">​</a></h1><h2 id="一、介绍" tabindex="-1">一、介绍 <a class="header-anchor" href="#一、介绍" aria-label="Permalink to &quot;一、介绍&quot;">​</a></h2><h3 id="_1-1-什么是模块化与模块" tabindex="-1">1.1 什么是模块化与模块 ? <a class="header-anchor" href="#_1-1-什么是模块化与模块" aria-label="Permalink to &quot;1.1 什么是模块化与模块 ?&quot;">​</a></h3><p>将一个复杂的程序文件依据一定规则（规范）拆分成多个文件的过程称之为 <code>模块化</code></p><p>其中拆分出的 <code>每个文件就是一个模块</code> ，模块的内部数据是私有的，不过模块可以暴露内部数据以便其他模块使用</p><h3 id="_1-2-什么是模块化项目" tabindex="-1">1.2 什么是模块化项目 ? <a class="header-anchor" href="#_1-2-什么是模块化项目" aria-label="Permalink to &quot;1.2 什么是模块化项目 ?&quot;">​</a></h3><p>编码时是按照模块一个一个编码的， 整个项目就是一个模块化的项目</p><h3 id="_1-3-模块化好处" tabindex="-1">1.3 模块化好处 <a class="header-anchor" href="#_1-3-模块化好处" aria-label="Permalink to &quot;1.3 模块化好处&quot;">​</a></h3><p>下面是模块化的一些好处：</p><ol><li>防止命名冲突</li><li>高复用性</li><li>高维护性</li></ol><h2 id="二、模块暴露数据" tabindex="-1">二、模块暴露数据 <a class="header-anchor" href="#二、模块暴露数据" aria-label="Permalink to &quot;二、模块暴露数据&quot;">​</a></h2><h3 id="_2-1-模块初体验" tabindex="-1">2.1 模块初体验 <a class="header-anchor" href="#_2-1-模块初体验" aria-label="Permalink to &quot;2.1 模块初体验&quot;">​</a></h3><p>可以通过下面的操作步骤，快速体验模块化</p><ol><li>创建 <a href="%E4%BB%A3%E7%A0%81/05_%E6%A8%A1%E5%9D%97%E5%8C%96/%E4%BB%A3%E7%A0%81/01_%E5%88%9D%E4%BD%93%E9%AA%8C/me.js">me.js</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//声明函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tiemo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;贴膜....&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//暴露数据</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tiemo;</span></span></code></pre></div></li><li>创建 <a href="%E4%BB%A3%E7%A0%81/05_%E6%A8%A1%E5%9D%97%E5%8C%96/%E4%BB%A3%E7%A0%81/01_%E5%88%9D%E4%BD%93%E9%AA%8C/index.js">index.js</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//导入模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tiemo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./me.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//调用函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tiemo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div></li></ol><h3 id="_2-2-暴露数据" tabindex="-1"><a href="%E4%BB%A3%E7%A0%81/05_%E6%A8%A1%E5%9D%97%E5%8C%96/%E4%BB%A3%E7%A0%81/02_%E6%A8%A1%E5%9D%97%E6%9A%B4%E9%9C%B2%E6%95%B0%E6%8D%AE/me.js">2.2 暴露数据</a> <a class="header-anchor" href="#_2-2-暴露数据" aria-label="Permalink to &quot;[2.2 暴露数据](代码/05_模块化/代码/02_模块暴露数据/me.js)&quot;">​</a></h3><p>模块暴露数据的方式有两种：</p><ol><li>module.exports = value</li><li>exports.name = value</li></ol><blockquote><p>使用时有几点注意：</p><ul><li>module.exports 可以暴露 <code>任意</code> 数据</li><li>不能使用 <code>exports = value</code> 的形式暴露数据，模块内部 module 与 exports 的隐式关系 <code>exports = module.exports = {}</code> <code>exports === module.exports</code><br> require 返回的是目标模块中 <code>module.exports</code> 的值</li></ul></blockquote><p><img src="`+l+'" alt="1683296652447"></p><h2 id="三、导入-引入-模块" tabindex="-1"><a href="%E4%BB%A3%E7%A0%81/05_%E6%A8%A1%E5%9D%97%E5%8C%96/%E4%BB%A3%E7%A0%81/03_%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97/index.js">三、导入（引入）模块</a> <a class="header-anchor" href="#三、导入-引入-模块" aria-label="Permalink to &quot;[三、导入（引入）模块](代码/05_模块化/代码/03_导入模块/index.js)&quot;">​</a></h2><p>在模块中使用 require 传入文件路径即可引入文件</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> test</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./me.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>require 使用的一些注意事项：</p><ol><li>对于自己创建的模块，导入时路径建议写 <code>相对路径</code> ，且不能省略 <code>./</code> 和 <code>../</code></li><li><code>js</code> 和 <code>json</code> 文件导入时可以不用写后缀（优先查找js文件），c/c++编写的 <code>node</code> 扩展文件也可以不写后缀，但是一般用不到</li><li>如果导入其他类型的文件，会以 <code>js</code> 文件进行处理</li><li>如果导入的路径是个文件夹，则会 <code>首先</code> 检测该文件夹下 <code>package.json</code> 文件中 <code>main</code> 属性对应的文件， <ul><li>如果存在则导入，反之如果文件不存在会报错。</li><li>如果 <code>main</code> 属性不存在，或者 <code>package.json</code> 不存在，则会尝试导入文件夹下的 <code>index.js</code> 和 <code>index.json</code> ，如果还是没找到，就会报错</li></ul></li><li>导入 node.js 内置模块时，直接 require 模块的名字即可，无需加 <code>./</code> 和 <code>../</code></li></ol><h2 id="四、导入模块的基本流程" tabindex="-1"><a href="%E4%BB%A3%E7%A0%81/05_%E6%A8%A1%E5%9D%97%E5%8C%96/%E4%BB%A3%E7%A0%81/05_require/show.js">四、导入模块的基本流程</a> <a class="header-anchor" href="#四、导入模块的基本流程" aria-label="Permalink to &quot;[四、导入模块的基本流程](代码/05_模块化/代码/05_require/show.js)&quot;">​</a></h2><p>这里我们介绍一下 <code>require</code> 导入 <code>自定义模块</code> 的基本流程</p><ol><li>将相对路径转为绝对路径，定位目标文件</li><li>缓存检测</li><li>读取目标文件代码</li><li>包裹为一个函数并执行（自执行函数）。通过 <code>arguments.callee.toString()</code> 查看自执行函数</li><li>缓存模块的值</li><li>返回 <code>module.exports</code> 的值</li></ol><p><img src="'+o+'" alt="1683296785095"></p><h2 id="五、commonjs-规范" tabindex="-1">五、CommonJS 规范 <a class="header-anchor" href="#五、commonjs-规范" aria-label="Permalink to &quot;五、CommonJS 规范&quot;">​</a></h2><p><code>module.exports</code> 、 <code>exports</code> 以及 <code>require</code> 这些都是 <code>CommonJS</code> 模块化规范中的内容。 而 <code>Node.js</code> 是实现了 <code>CommonJS</code> 模块化规范，二者关系有点像 <code>JavaScript</code> 与 <code>ECMAScript</code></p>',30),d=[n];function h(p,c,r,k,E,u){return i(),e("div",null,d)}const g=s(t,[["render",h]]);export{_ as __pageData,g as default};
